/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.42).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AddMandateTriplet;
import io.swagger.model.MandateToSubDelegate;
import io.swagger.model.MandateTriplet;
import io.swagger.model.Problem;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-05-26T08:32:38.776681318Z[GMT]")
@Validated
public interface RepresenteesApi {

    @Operation(summary = "Add a mandate to a delegate under a representee", description = "<p>This query is for the following use-case. The end user (in our example EE39912310123) logs into Pääsuke (that runs under www.eesti.ee) and adds a mandate from there (for example the end user adds \"GLOBAL1_EMTA:ACCOUNTANT\" role (with the right to further sub-delegate it) for the company accountant Jüri Juurikas). After end user confirms adding of the mandate then Pääsuke makes this POST request for each mandate.</p> <p>NB! The end user can only add mandates that have assignableBy in the role definition and the end user must have one of the roles.</p> ", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The request was fulfilled and the new mandate was created."),
        
        @ApiResponse(responseCode = "202", description = "Accepted for processing but not immediately created."),
        
        @ApiResponse(responseCode = "400", description = "Incorrect format of the payload", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Problem.class)))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden. Request not authorized."),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable request. Something went wrong.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Problem.class)))),
        
        @ApiResponse(responseCode = "501", description = "This request is not supported.") })
    @RequestMapping(value = "/representees/{representee}/delegates/{delegate}/mandates",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addMandate(@Parameter(in = ParameterIn.PATH, description = "<b>Identifier of the representee (volitaja).</b> Can be one of the follwing&colon; <p>a)  'EE' followed by 8-digit legal entity code from Estonian Business Registry</p> <p>b) 'EE' followed by 11-digit national identity number</p> <p>c) Two-letter country code followed by eIDAS identification (1...254 symbols) - Pääsuke uses the value that was returned by Tara when the person logged into eesti.ee portal.</p>", required=true, schema=@Schema()) @PathVariable("representee") String representee, @Parameter(in = ParameterIn.PATH, description = "<b>Identifier of the delegate (volituste saaja).</b> Can be one of the follwing&colon; <p>a)  'EE' followed by 8-digit legal entity code from Estonian Business Registry</p> <p>b) 'EE' followed by 11-digit national identity number</p> <p>c) Two-letter country code followed by eIDAS identification (1...254 symbols) - Pääsuke uses the value that was returned by Tara when the person logged into eesti.ee portal.</p>", required=true, schema=@Schema()) @PathVariable("delegate") String delegate, @Parameter(in = ParameterIn.HEADER, description = "User identifier whose action initiated the request. This also can be an employee of RIA using some back-end." ,schema=@Schema()) @RequestHeader(value="X-Road-UserId", required=false) String xRoadUserId, @Parameter(in = ParameterIn.HEADER, description = "When service client represents third party while issuing a query then it must be filled with identifier of that third party. When service client represents itself then this header is omitted." ,schema=@Schema()) @RequestHeader(value="X-Road-Represented-Party", required=false) String xRoadRepresentedParty, @Parameter(in = ParameterIn.HEADER, description = "Unique identifier (UUID) for this message." ,schema=@Schema()) @RequestHeader(value="X-Road-Id", required=false) String xRoadId, @Parameter(in = ParameterIn.DEFAULT, description = "Details of the mandate being added.<p><b>Identifier of the representee (volituse andja) and delegate (volitaja)</b> can be one of the follwing&colon;</p><p>a)  'EE' followed by 8-digit legal entity code from Estonian Business Registry (however in reality it is very rarely that the sub-delegate is a company, it is usually a natural person)</p> <p>b) 'EE' followed by 11-digit national identity number</p> <p>c) Two-letter country code followed by eIDAS identification (1...254 symbols) - Pääsuke uses the value that was returned by Tara when the person logged into eesti.ee portal.</p><p>The <b>validityPeriod</b> can be from today and infinite (no through date) or with specific end date.</p><p>The <b>authorizations</b> block informs why Pääsuke came to a conclusin that this user has the authorization to add this mandate. The userIdentifier always points to the acutal natural person who confirmed the action in the user interface.</p>", schema=@Schema()) @Valid @RequestBody AddMandateTriplet body);


    @Operation(summary = "Sub-delegate a single mandate", description = "To add a sub-delegate for a specific mandate. The values of representeeId, delegateId and mandateId are taken from the output of the Mandate, from the 'addSubDelegate' link. ", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Created"),
        
        @ApiResponse(responseCode = "202", description = "Accepted for processing but yet not added"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden. Request not authorized."),
        
        @ApiResponse(responseCode = "404", description = "Endpoint was not found."),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable request. Something went wrong. If mandate was not found then the system should retrun this response together with translation.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Problem.class)))),
        
        @ApiResponse(responseCode = "500", description = "Reserved for errors returned by security server."),
        
        @ApiResponse(responseCode = "501", description = "This operation is not supported.") })
    @RequestMapping(value = "/representees/{representeeId}/delegates/{delegateId}/mandates/{mandateId}/subdelegates",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addSubDelegate(@Parameter(in = ParameterIn.PATH, description = "Implementator can use any form of representee identifier (like internal person id). Pääsuke takes this value from 'addSubDelegate' link.", required=true, schema=@Schema()) @PathVariable("representeeId") String representeeId, @Parameter(in = ParameterIn.PATH, description = "Implementator can use any form of delegate identifier (like internal person id). Pääsuke takes this value from 'addSubDelegate' link.", required=true, schema=@Schema()) @PathVariable("delegateId") String delegateId, @Parameter(in = ParameterIn.PATH, description = "Implementator can use any form of mandate (or role) identifier (like internal mandate id). Pääsuke takes this value from 'addSubDelegate' link.", required=true, schema=@Schema()) @PathVariable("mandateId") String mandateId, @Parameter(in = ParameterIn.HEADER, description = "User identifier whose action initiated the request. This also can be an employee of RIA using some back-end." ,schema=@Schema()) @RequestHeader(value="X-Road-UserId", required=false) String xRoadUserId, @Parameter(in = ParameterIn.HEADER, description = "When service client represents third party while issuing a query then it must be filled with identifier of that third party. When service client represents itself then this header is omitted." ,schema=@Schema()) @RequestHeader(value="X-Road-Represented-Party", required=false) String xRoadRepresentedParty, @Parameter(in = ParameterIn.HEADER, description = "Unique identifier (UUID) for this message." ,schema=@Schema()) @RequestHeader(value="X-Road-Id", required=false) String xRoadId, @Parameter(in = ParameterIn.DEFAULT, description = "Details of the person whom the mandate is being sub-delegated, also the validity period and the details why Pääsuke allowed this operation to take place. <p><b>Identifier of the subDelegate (edasivolitatu)</b> can be one of the follwing&colon;</p> <p>a) 'EE' followed by 11-digit national identity number</p> <p>b) Two-letter country code followed by eIDAS identification (1...254 symbols) - Pääsuke uses the value that was returned by Tara when the person logged into eesti.ee portal.</p><p>The sub-delegate cannot be a legal person.</p><p>The <b>validityPeriod</b> can only be within the original validity period and validity period.</p><p>The <b>authorizations</b> block informs why Pääsuke came to a conclusin that this user has the authorization to sub-delegate this mandate. The userIdentifier always points to the acutal natural person who confirmed the action from the user interface.</p><p><b>document</b> - This section is present if the persons listed in authorizations block added their digital signature.</p><p><b>document.uuid</b> Document UUID. This identifier can be used to download the signed container from Pääsuke over x-road.</p><p><b>document.singleDelegate</b> is set to true in case the signed document contains information about a single delegate and it is safe to reveal the document to the delegate. False means that the signed container contains information about multiple delegates and it is only safe to reveal it to the representee and not to any of the delegates.</p>", schema=@Schema()) @Valid @RequestBody MandateToSubDelegate body);


    @Operation(summary = "Edit mandate (by ending the validity of it)", description = "To edit a mandate, currently the only supported action is DELETE which means ending the validity of the mandate. The values of representeeId, delegateId and mandateId are taken from the output of the Mandate, from the delete link. ", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Deleted sucessfully"),
        
        @ApiResponse(responseCode = "202", description = "Request accepted but not yet deleted"),
        
        @ApiResponse(responseCode = "400", description = "Invalid parameter"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden. Request not authorized."),
        
        @ApiResponse(responseCode = "404", description = "Resource to delete was not found."),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable request. Something went wrong.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Problem.class)))),
        
        @ApiResponse(responseCode = "500", description = "This error code is reserved for security server."),
        
        @ApiResponse(responseCode = "501", description = "This operation is not supported.") })
    @RequestMapping(value = "/representees/{representeeId}/delegates/{delegateId}/mandates/{mandateId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> editMandate(@Parameter(in = ParameterIn.PATH, description = "Implementator can use any form of representee identifier (like internal person id). Pääsuke takes this value from 'delete' link.", required=true, schema=@Schema()) @PathVariable("representeeId") String representeeId, @Parameter(in = ParameterIn.PATH, description = "Implementator can use any form of delegate identifier (like internal person id). Pääsuke takes this value from 'delete' link.", required=true, schema=@Schema()) @PathVariable("delegateId") String delegateId, @Parameter(in = ParameterIn.PATH, description = "Implementator can use any form of mandate (or role) identifier (like internal mandate id). Pääsuke takes this value from 'delete' link.", required=true, schema=@Schema()) @PathVariable("mandateId") String mandateId, @Parameter(in = ParameterIn.HEADER, description = "User identifier whose action initiated the request. This also can be an employee of RIA using some back-end." ,schema=@Schema()) @RequestHeader(value="X-Road-UserId", required=false) String xRoadUserId, @Parameter(in = ParameterIn.HEADER, description = "When service client represents third party while issuing a query then it must be filled with identifier of that third party. When service client represents itself then this header is omitted." ,schema=@Schema()) @RequestHeader(value="X-Road-Represented-Party", required=false) String xRoadRepresentedParty, @Parameter(in = ParameterIn.HEADER, description = "Unique identifier (UUID) for this message." ,schema=@Schema()) @RequestHeader(value="X-Road-Id", required=false) String xRoadId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Object body);


    @Operation(summary = "List delegates who have any mandates that are currently valid or become valid in the future.", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "MandateTriplets that match to the query parameters. MandateTriplet consists of 3 parts&colon; <ol>   <li>representee (volitaja)</li>   <li>delegate (volitatu)</li>   <li>list of mandates that are currently valid or become valid in the future.</li></ol> Properties of a mandate: <ul>   <li><b>role</b></li>   <li><b>validityPeriod</b> - if this value is present it must have either validFrom, validThrough or both. If the valid through date is in the past the mandate must not be returned at all. The value of validThrough must be to the last date the mandate is valid (like 31.12.2029). If the mandate is valid indefinitely then validThrough must be omitted.</li>   <li><b>canSubDlegate</b> - it is true if the person has given this mandate with the right to further sub-delegate it. Otherwise the value is false or not returned at all.</li>   <li><b>subDelegatorIdentifier</b> - precence of this value indicates that this mandate has been created by adding a sub-delegate to some other mandate. The value of this property indicates who was the delegate of the original mandate.</li>   </ul> ", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = MandateTriplet.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad input parameter"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden. Request not authorized."),
        
        @ApiResponse(responseCode = "404", description = "Representee is unknown. If representee is known but there are no mandates to return then empty list should be returned instead."),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable request. Something went wrong.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Problem.class)))) })
    @RequestMapping(value = "/representees/{representee}/delegates/mandates",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<MandateTriplet>> getRepresenteeDelegatesWithMandates(@Parameter(in = ParameterIn.PATH, description = "<b>Identifier of the representee (volitaja).</b> Can be one of the follwing&colon; <p>a)  'EE' followed by 8-digit legal entity code from Estonian Business Registry</p> <p>b) 'EE' followed by 11-digit national identity number</p> <p>c) Two-letter country code followed by eIDAS identification (1...254 symbols) - Pääsuke uses the value that was returned by Tara when the person logged into eesti.ee portal.</p>", required=true, schema=@Schema()) @PathVariable("representee") String representee, @Parameter(in = ParameterIn.QUERY, description = "<p><b>To add a filter to results so that only mandates that were sub-delegated by this person (edasivolitaja) would be returned.</b></p> <p>This is to cover the following use case. Let's say LittleCompany has given BookkeepingCompany some role together with the right for BookkeepingCompany to further sub-delegate the role to its employees.</p> <p>BookkeepingCompany can use this query to get the list of its employees who have received this role from BookkeepingCompany through sub-delegation.</p> <p>To display this list Pääsuke makes a query  where representee={LittleCompanyIdentifier} and subDelegatedBy={BookkeepingCompanyIdentifier}.</p>" ,schema=@Schema()) @Valid @RequestParam(value = "subDelegatedBy", required = false) String subDelegatedBy, @Parameter(in = ParameterIn.QUERY, description = "Only return mandates with this delegate (volitatu). This is used for TÖR queries." ,schema=@Schema()) @Valid @RequestParam(value = "delegate", required = false) String delegate, @Parameter(in = ParameterIn.HEADER, description = "User identifier whose action initiated the request. This also can be an employee of RIA using some back-end." ,schema=@Schema()) @RequestHeader(value="X-Road-UserId", required=false) String xRoadUserId, @Parameter(in = ParameterIn.HEADER, description = "When service client represents third party while issuing a query then it must be filled with identifier of that third party. When service client represents itself then this header is omitted." ,schema=@Schema()) @RequestHeader(value="X-Road-Represented-Party", required=false) String xRoadRepresentedParty, @Parameter(in = ParameterIn.HEADER, description = "Unique identifier (UUID) for this message." ,schema=@Schema()) @RequestHeader(value="X-Road-Id", required=false) String xRoadId);

}

